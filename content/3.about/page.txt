title: Documentation
-
content: 
Overview
Stacey is a framework for building simple dynamic html websites.

The project is based around two core ideals:

Separating textual content & assets from your html, and
Keeping ugly php-style logic out of your templates
These map directly to the /content and /templates folders respectively.

Stacey handles all the dynamic parts like creating breadcrumbs, navigation lists & shared content and linking images & assets. It includes a simple templating language and partial system so you have complete control over every piece of markup that is generated.

There are a few simple portfolio-style templates provided to give an idea of how the system works, but don’t let that mislead you, stacey is flexible enough to build sites of significant complexity.

Deployment
Because stacey uses the file system to store and manage data, it means you are able to build & deploy sites extremely quickly. Additionally, as php hosting is so common, stacey-based sites can be deployed very cost-effectively and to pretty much any standard hosting package.

Caching
Because reading a file system can become slow on larger sites, stacey uses a combination of file-based caching & e-tag headers to ensure pages are always loaded as quickly as possible. The caching system is smart enough to only rebuild the cache when the content has been updated.

600 lines
The entire stacey codebase is around 600 lines of code, so it shouldn’t be too hard to read through, get an idea of how it works & extend for your own purposes.

**************
Creating Pages
**************

Each folder within /content which
contains a .txt file will become a page. So to create a new
page, you just
have to make a new folder then create a .txt file within it.
The name of
the .txt file will tell stacey which template ( http://staceyapp.com/documentation/editing-templates/#template-assignment ) it
should use for that page.

Pages are listed in reverse-numeric order using a numbered
prefix on the
folder name (10. 9. 8.,
etc.). The url used to access each page will be the folder
name minus the
number and dot.

ie. a folder named: 1.project-name-10 will
be accessed via
http://yourdomain.com/projects/project-name-10.

If you have clean
urls disabled (which they are by default) then the url will
be
prepended with a ?/.

ie. a folder named: 1.project-name-10 will
be accessed via
http://yourdomain.com/?/projects/project-name-10.

If you leave the numbered prefix off a folder, then the page
will not show
up in any collections ($siblings, $children, etc.), but will
still be
accessible by its url. This is useful for creating ‘floating’
pages.

When naming your folders, rather than using underscores (_),
you should use
hyphens (-) to separate words.

ie. 1.project-name rather
than 1.project_name or 1.project
name.

Stacey supports unlimited depths of sub-pages, so you can
split your
categories into sub-categories & sub-sub-categories. Whatever
works for
you.

Images
------

Stacey picks up any images within the page’s folder and
automatically
inserts them into the page. Like pages themselves, the images
are displayed
in reverse-numeric order.

Images are inserted as is, so they will need to be cropped to
the correct
size before being added to the folder. The default template
relies on
images with a maximum width of 560px.
Images get collated into a partial named :images,
which can be inserted anywhere within a template file.

Other assets
------------

Video & .swf files are embedded & included in the same way as
images (collated into :swf & :video partials),
whereas the content within any .html files
will be inserted in place of the :html partial.
This is useful for embedding Youtube or Vimeo videos in the
page.

.swf or video files will need to be named after the file’s
dimensions. ie.
1.800x600.mp4
— where 800 is
the movie’s width & 600 is
its height.

In addition, stacey will recognise any other assets placed
within a page’s
folder. Read more about handling
other asset types.

Thumbnails
----------

Each page can also have its own thumbnail. They can be added
by placing a
image file named thumb (.gif,
.jpg or .png) within the page’s folder.

In the default templates, thumbnails are hidden using css. To
turn their
display back on you need to edit the main css file
(in /public/docs/css/screen.css).

towards the bottom of the file, find the line that reads:

img.project-thumb { ... display: none; }

and change it to read:

img.project-thumb { ... display: inline; }

Your thumbnails can be any size you like, but on the default
template are
designed to be relatively small.

***************
Content Editing
***************

Within the /content directory,
there is a file named _shared.txt.

If
you open it up with a text editor, you should see:

n ame: Name
line
 rofession: Graphic Designer
line
email: hi@yourdomain.com

Replace the highlighted data with your own details.

Text file encoding
------------------

All of your .txt files should be encoded using UTF-8. In
addition to
ensuring no strange characters are inserted which could break
stacey’s
rendering engine, this will also allow you to use special
characters such
as ö, — or
double-byte characters such as 照 or ラ.

Any decent text editor will give you the option to edit and
save your text
files as UTF-8, so google should be able to provide answers
on how to do
this with your editor of choice.

You can read more about text
files & UTF-8
encoding on Wikipedia.

Editing content
---------------

Each folder which is to be displayed as a page should have
a .txt file
inside it (even if this text file is empty). The name of the
.txt file
should match up with a file in the /templates folder,
as this is how stacey knows which template to use for each
page.

How variables are
created:

* Browser hits http://yourdomain.com/?/about/.
* Stacey reads the appropriate
content file /content/3.about/content.txt.

title: About Title
-
content:
Lorem ipsum.

* Two variables are extracted from the
keys & values from within the .txt
file:@title & @content.
These will be available for use within the templates.
* Stacey finds the matching template
file, in this case, /templates/content.html

* Stacey replaces the variables in
the template and outputs the final html.

So this template code:

******
@title
******

@content

becomes this html:

***********
About Title
***********

Lorem ipsum.

Content file format
-------------------

The content files all follow a standard format; each key is
followed by a :,
avalue and
a hyphen (-) to close the value.

key: value
-

The keys match up with variable markers in the template files
which get
replaced with the contents of the value.
You can create as many of your own keys as you need.

Keys
----

A
key may only contain the following
characters:abcdefghijklmnopqrstuvwxyz0123456789_

Essentially, lowercase latin alphanumeric characters and
underscores.

Or, for the more technically inclined, anything which can be
matched by the
following regular expression: /[a-z0-9_]+?:/

A
standard content file looks something like this:

title: The Test Project 1
-
date: 2009, Jun—
-
content:
Lorem ipsum dolor...

Separating Keys &
Values

Each value should be followed by a line containing only a
hyphen character
(although the parser is forgiving of any accidental tabs or
spaces).

The hyphen is optional on the last key/value pair.

title: The Test Project 1
-
date: ...

Empty Values
------------

If
you want one of the values to be empty, leave a space after
the colon.

title:
-
date: ...

@path
-----

Additionally, the @path variable
is exposed to your content files, which is useful for linking
to assets
within the current folder.

It will output the relative path to the containing folder of
the current
page.

ie. ../content/4.projects/10.project-1/

@bypass_cache
-------------

To
bypass the cache for a specific page, you can
add bypass_cache:
true to its text file. Any requests to this page will no
longer
be cached. This is useful for pages which use randomised
variables or php
code.

Markdown
--------

Any values which contain one or more newline characters
(line-breaks) will
be parsed as Markdown ( http://daringfireball.net/projects/markdown/ ).

Within the following example, @title will come through as
plain text, while
@content will be parsed as Markdown.

This:

date: 2009, Jun—
-
content:
# Title
Lorem ipsum.

will become:

@date => 2009, Jun—

@content =>

Title

Lorem ipsum.

Because Markdown ignores html, if you prefer, you can use
standard markup
in place of Markdown. The keys & values mentioned above could
just as
easily be written out as:

date: 2009, Jun
line
content:

*****
Title
*****

Lorem ipsum.

Markdown References
-------------------

Stacey uses PHP
Markdown Extra which is a php-specific version of Markdown.
It also adds some of its own functionality, such as fenced
code blocks and
header ids, so you should refer to its documentation as well
as that of the
original Markdown.

*
Markdown Documentation

*
PHP Markdown Extra Documentation

****************
Template Editing
****************

Stacey’s templates allow a mix of standard markup types &
simple
dynamic variables to help create your final pages.

They
end up looking something like this:

...

@name
@profession

@email
:navigation

:category_lists

© Copyright @name @current_year

...

All of
the templates sit within the /templates folder.
Partial templates sit within/templates/partials,
they are used for looping through collections of objects
such as the
images within a folder or sets of navigation.

Read
more about how
partials work.

Template
assignment

Templates are assigned to pages based off the name of the
.txt file
within the page’s folder. If no matches are found, stacey
will return
an error.

ie. if the /content/2.contact-me/ folder’s
.txt file is named contact-page.txt,
it will look for a matching template within the
/templates/ folder,
finding one namedcontact-page.html.

Template types
--------------

Templates do not need to be .html files. Stacey will
recognise and
serve correct content-type headers for templates with the
following
extensions:

.html, .json, .xml, .atom, .rss, .rdf & .txt

-------------
Public folder
-------------

If clean
urls are enabled, any files (and folders) within
the public folder
will be served from the root of your website.

ie. /public/docs/css/screen.css will
be accessible
fromhttp://yourdomain.com/docs/css/screen.css.

The
public folder is generally where you store your css,
javascript &
any assets used within the templates.

*******************
Templating Language
*******************

Stacey
pre-parses each template as plain text before it is
rendered out as
html. As the templating system runs off regular
expressions, there is
no need to explicitly wrap the language constructs
in tags.

-------------------
Language Constructs
-------------------

Within
stacey templates, you have access to three language
constructs: getblocks, foreach loops
& boolean if statements.

get

get "/url" do
# do stuff
end

foreach

foreach $collection do
# do stuff
endforeach

if

if @variable do
# do stuff
endif

if
not

if !@variable do
# do stuff
endif

Variable Context
----------------

Once
you are inside a foreach loop,
the variable context changes to the current object being
referenced by
the loop.

If you
want to temporarily shift to the context of a specific
page, you can
add aget block.

get "/projects/project-1" do
@page_name

end

This
will change the context from the current page being
viewed to
the/projects/project-1 page.
This means $children will
be filled with the children of the /projects/project-1
page, @page_name will
equal 'Projects', etc.

So, if
you wanted to only list children of the /projects folder
which do not
contain children of their own, you could construct the
following
partial:

get "/projects" do
foreach $children do
if !$children do
@url">@page_name (

Limiting foreach
Loops

It is
possible to limit foreach loops using a
$collection[start:limit]
syntax.

The array will essentially be sliced from the
provided start until
the limit.

The start & limit are
both optional. You could specify $collection[:2] to
only list the first two items, or $collection[2:] to
list all items except the first two.

The
following partial would list the third & fourth items
from the
$children collection:

foreach $children[2:2] do* @page_name ( @url )
endforeach

Nesting foreach
Loops

To give
you the ability to pass through multiple levels of
objects, foreach
loops can also be nested within themselves (although
using recursive
partials would be a more elegant solution).

foreach $root do* @page_name ( @url )
if $children do

foreach $children do* @page_name ( @url )
endforeach

endif

endforeach

******
Assets
******

In
addition to any images or videos, stacey will also
recognise any asset
types placed within a page’s folder and push them into
their
own collections ( http://staceyapp.com/documentation/variable-types/collections/ ).

For
example, this page:

will
create the following collections:

$pdf: ['pdf-file.pdf' => Asset]

$mp3: ['mp3-file-1.mp3' => Asset
'mp3-file-2.mp3' => Asset]

$html: ['youtube-embed.html' => HTML]

$doc: ['word-document.doc' => Asset]

$jpg: ['01.jpg' => Image]

Each of
these can be looped over within your templates or
partials in the same
way as the $images or $video collections.

ie.

foreach $mp3 do

@url">

@url" type="video/quicktime" width="200" controller="true"
autoplay="false" kioskmode="true">

endforeach

-----------------
Asset Collections
-----------------

You can
also create specific, named, collections of assets.
Stacey will
recognise any folders beginning with an underscore as
asset
collections. These collections can be referenced using
the name of the
folder prefixed with a $ character.

ie.
this directory structure:

will
create the following asset collections:

$_logos: ['logo1.gif' => Image
'logo2.mov' => Video]

$_thumbnails: ['thumb1.jpg' => Image
'thumb2.jpg' => Image
'thumb3.jpg' => Image
'thumb4.jpg' => Image]

These
asset collections can then be looped over in the same way
as
the $imagescollection.

ie.

foreach $_logos do
* @url" alt="@name">
endforeach

Asset
collection folders will not show up within any other
collections (such
as $siblings or $children).

-----------
Asset Types
-----------

Stacey
knows how to construct a few asset types by default. Each
type will be
assigned its own set of variables which can then be
accessed within the
context of a loop.

Images
------

(.jpg, .jpeg, .gif, .png)

@name

The name of the current image. This is constructed by
converting
the filename into sentence-text
(ie. 1.my-image.jpg becomes My
image).

@file_name

The filename of the current file.
(ie. 1.my-image.jpg)

@url

The relative path to this file from the current page.
(ie. )

@small

The relative path to a file matching the name &
filetype of the
current file, with an _sml suffix (if such a file
exists).

ie. an image named portrait.jpg would
have an @small var ofportrait_sml.jpg

@large

The relative path to a file matching the name &
filetype of the
current file, with an _lge suffix (if such a file
exists).

ie. an image named portrait.jpg would
have an @large var ofportrait_lge.jpg

@width

The width of the current image.ie.
560

@height

The height of the current image.ie.
400

The following variables are read from IPTC
metadata attached to the image.

@title

The 'title' IPTC metadata (field 005).

@description

The 'description/caption' IPTC metadata (field 120).

@keywords

The 'keywords' IPTC metadata (field 025).

Video
-----

(.mov, .mp4, .m4v, .swf)

@name

The name of the current video. This is constructed by
converting
the filename into sentence-text
(ie. 1.my-movie.mov becomes My
movie).

@file_name

The filename of the current file.

@url

The relative path to this file from the current page.

@width

The width of the current video (pulled from the name
of the file –
ie.300x150.mov).

@height

The height of the current video (pulled from the name
of the file –
ie. 300x150.mov).

HTML
----

(.html, .htm)

@name

The name of the current file. This is constructed by
converting the
filename into sentence-text
(ie. 1.my-youtube-video.html becomes My
youtube video).

@file_name

The filename of the current file.

@url

The relative path to this file from the current page.

@content

The contents of the html file (as raw html).

Any other
assets

(.*)

@name

The name of the current file. This is constructed by
converting the
filename into sentence-text
(ie. 1.my-resume.pdf becomes My
resume).

@file_name

The filename of the current file.

@url

The relative path to this file from the current page.

IPTC metadata
-------------

The IPTC
metadata standard allows read/write metadata to be
attached
directly to image files (generally copyright information,
author name
and the like). Stacey will extract parts of this data and
make it
available to the templates.

Currently the supported fields
are @title, @description & @keywords.
You can attach and edit IPTC metadata using a variety of
programs — two
free options areCocoViewX ( http://www.stalkingwolf.net/software/cocoviewx/ ) (for
mac) & Irfanview ( http://www.irfanview.com/ ) (for
windows)

**************
Variable Types
**************

There
are three type of variables within stacey’s templating
system:

@variables

constructed from the contents of the page’s .txt file
and
supplemented by stacey (ie. @page_name).

$collections

collections of assets or pages that can be looped
over
(ie. $children).

:partials

shorthand reference to include files from within
the /templates/partialsdirectory
(ie. :navigation).

*********
Variables
*********

Within
the templates files, apart from our standard html, we
also have access
to any variables defined within the .txt file that
corresponds to the
current page. These can be accessed by using an @ symbol
followed by the key.

ie. @title

In
addition, any variables defined
in /content/_shared.txt are
available within all template files.

------------------------
Stacey-created variables
------------------------

These
are created for each page within the site.

@root_path

Will output a relative path from the current page to
the root of
the site.ie.
in /projects/project-name/@root_path
will contain ../../.

@thumb

Outputs the relative url to the thumbnail for this
page (if one
exists).

@url

Outputs the relative path to this page from the page
currently
being viewed (ie. ../../projects/project-1).

@permalink

Outputs the absolute url path of the current page
(ie. projects/project-1).

@slug

Outputs the slug of the current page (ie. project-1).

@is_current

Returns true if @permalink matches
the server’s request uri.

@is_first

Returns true if current page is the first in its
collection.

@is_last

Returns true if current page is the last in its
collection.

@page_name

Outputs the name of the current page. This is
constructed by
converting the page’s slug into title-case text
(ie. test-project-1 becomes Test
Project 1).

@siblings_count

The number of pages sitting at the same level as this
page
(ie. 12).

@children_count

The number of children below this page (ie. 12).

@index

The number of the current page, relative to the other
pages sitting
at the same level (ie. 5).

@current_year

Will output the current year.

@domain_name

Will output the domain name of the current site
(ie. staceyapp.com).

@base_url

Will output the domain name & folder path stacey is
running
from (ie.staceyapp.com/stacey).

@site_updated

Will output the date the site was last edited in
the RFC
3339 format (ie.2009-12-12T17:34:23+11:00).

@updated

Will output the date the current page was last edited
in
the RFC
3339format (ie. 2009-12-12T17:34:23+11:00).

@stacey_version

Will output the version of stacey you are running
(ie. 2.0).

Text-file
variables

These
variables can be used from within your text files.

@path

Will output the full file system path to the current
page.
(ie. /content/3.about)

@bypass_cache

If set, this will bypass stacey's caching mechanisms
for this
page.

***********
Collections
***********

Stacey
provides collections of related pages and assets which
can
be looped
overfrom within the templates.

$root

Will list each top-level page within /content.

$children

Will list any child pages relative to the current
page.

$parents

Will list the full ancestor tree relative to the
current page.

$parent

Will list the direct ancestor relative to the current
page.

$siblings

Will list any pages sitting at the same level as the
current page.
This collection does not include the current page.

$siblings_and_self

Will list any pages sitting at the same level as the
current page.
This collection includes the current page.

$next_sibling

Constructs a reference to the next page sitting at
the same level
as the current page (in reverse-numeric order).

$previous_sibling

Constructs a reference to the previous page sitting
at the same
level as the current page (in reverse-numeric order).

-----------------
Asset Collections
-----------------

$images
$video

Will output a list of all the images or video files
associated with
this page (ie. sitting in the same folder as the
page’s .txt file).
If there are no matching assets, these collections
will be
empty.

$html,
$swf,
$mp3,
$pdf,

etc.

********
Partials
********

Partial templates separate
out re-usable and repeatable blocks of html into
their own
files. They sit within
the /templates/partials folder.

Stacey essentially
flattens the folder structure within
/templates/partials, so
you can place your partial files within whatever
subfolders
make sense to you. This also means that you
cannot have two
templates with the same name, even if they sit
within different
folders, or have different file extensions.

Partials can be referenced
within a template by using a : followed
by the filename of the partial template.

ie. :images will
be a reference to
the /templates/partials/assets/images.html partial.

As with templates,
partials do not need to be .html files. Stacey
will recognise
the following
formats: .html, .json, .xml, .atom, .rss, .rdf & .txt

Partial Nesting
---------------

Partials references can
also be nested within other partials. So, an
example :mediapartial
could contain:

/templates/partials/assets/media.html

if $images do
:images
endif

if $video do
:video
endif

Where :images & :video are
references to other partial files.

Recursive Partials
------------------

Partials can also include
references to themselves, allowing you to recurse
through
nested objects (ie. walking down a tree of
$children).

A more elegant solution to
the nested foreach
loop example would be to split the code into two
partials and take advantage of recursion within
the :children partial.

/templates/partials/navigation/navigation.html

foreach $root do* @page_name ( @url ) :children
endforeach

/templates/partials/navigation/children.html

if $children do

foreach $children do* @page_name ( @url ) :children
endforeach
endif

Note that
the children.html partial
includes a reference to itself, which means it
will keep
including itself (within itself) until the if
statement no
longer returns true.

*************
RSS/Atom/JSON
*************

Stacey
doesn’t make too many assumptions about which format your
templates are
written in. It uses the extension of the template file to
work out what
type of content it should be serving. By default stacey
will recognise
and serve the correct content-types
for .html, .json, .xml, .atom, .rss, .rdf & .txt files.

In
fact, this is how the default RSS feed is built.
The /content/feed directory
is just a normal stacey page, the only difference is that
it uses .atom
rather than .html template files.

So, if
you wanted to switch out Atom for the RSS2 format,
your/templates/feed.atom template
could be renamed to feed.rss and
changed to look something like this:

@name's @feed_name
* http://@base_url/@permalink/
@description:feed_loop

Additionally, if clean
urls are enabled, stacey creates file extension shortcuts
for
all the file types listed above. This means rather than
having to point
to http://yourdomain.com/feed/,
you could shortcut this to
http://yourdomain.com/feed.atom.

Cleaning JSON
-------------

Stacey
will also automatically compress and strip any trailing
commas from
JSON templates. So, the following template:

get "/" do
{
"pages": [
foreach $children do
{ "title": "@title" },
endforeach
]
}
end

will
render as:

{"pages":[{"title":"Projects"},{"title":"About"},{"title":"Contact"}]}